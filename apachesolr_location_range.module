<?php

/**
 * @file
 * Contains functions and hooks for ApacheSol Location Range module.
 *
 * @author Milka Petkova <milka@milka.petkova.88@gmail.com>
 */

/**
 * Maps the location field to a solr definition
 * @return array
 *   $mappings is an array containing all the field mappings.
 */
function apachesolr_location_range_apachesolr_field_mappings() {
    $fields = field_info_fields();
    $mappings = array();
    foreach ($fields as $field) {
        if ($field['type'] == 'location') {
            $mappings['per-field'][$field['field_name']] = array(
                'indexing_callback' => '_apachesolr_location_range_indexing_callback',
                'index_type' => 'location',
                'facets' => TRUE,
                'multiple' => FALSE,
                'query types' => array('range_geo'),
                'query type' => 'range_geo',
            );
        }
    }
    return $mappings;
}

/**
 * Takes the values from the field and tells the module where to put them
 *
 * @param object $entity
 *   An object containing the entity that will get indexed.
 * @param string $field_name
 *   A string containing the name of the location field.
 * @param string $index_key
 *   A string containing the solr index field name.
 * @param array $field_info
 *   Array.
 *
 * @return array
 *   An array containing all the fields that needs to be indexed.
 */
function _apachesolr_location_range_indexing_callback($entity, $field_name, $index_key, $field_info) {
    $fields = array();

    if (!empty($entity->$field_name)) {
        //Get field value.
        $field_location = $entity->{$field_name}[LANGUAGE_NONE];
        if (!empty($field_location)) {
            foreach ($field_location as $delta => $item) {
                // Latitude/Longitude indexing.
                $fields[] = array(
                    'key' => $index_key,
                    'value' => implode(',', array($item['latitude'], $item['longitude'])),
                );
            }
        }
    }
    return $fields;
}

/**
 * Implements hook_facetapi_facet_info().
 * Provides the definitions for the extra facets.
 *
 * @param array $searcher_info
 *   The definition of the searcher that facets are being collected for.
 *
 * @return array
 *   An associative array keyed by unique name of the facet.
 */
function apachesolr_location_range_facetapi_facet_info($searcher_info) {
    $facets = array();

    $facets['location_range'] = array(
        'name' => 'location_range',
        'label' => t('Location Range'),
        'description' => t('Location range input filter by range.'),
        'field' => 'locs_field_location',
        'field alias' => 'location_range',
        'field api bundles' => array('node'),
        'dependency plugins' => array('bundle', 'role'),
        'query types' => array('range_geo'),
    );
    return $facets;
}

/**
 * Implements hook_facetapi_widgets().
 */
function apachesolr_location_range_facetapi_widgets() {
    return array(
        'apachesolr_facetapi_location' => array(
            'handler' => array(
                'label' => t('Location Range - input form'),
                'class' => 'ApacheSolrFacetapiWidgetLocation',
                'query types' => array('range_geo', 'geo'),
            ),
        ),
    );
}

/**
 * Implements hook_facetapi_query_types().
 */
function apachesolr_location_range_facetapi_query_types() {
    return array(
        'apachesolr_range_geo' => array(
            'handler' => array(
                'class' => 'ApacheSolrFacetapiRangeGeo',
                'adapter' => 'apachesolr',
            ),
        ),
    );
}

/**
 * Implements hook_apapchesolr_query_alter().
 * @param DrupalSolrQueryInterface $query
 */
function apachesolr_location_range_apachesolr_query_alter(DrupalSolrQueryInterface $query) {
    $query->addParam('fl', 'locs_field_location');
}

/**
 * This is invoked by apachesolr_search.module for the whole resultset returned
 * in a search.
 *
 * @param array $results
 *   The returned search results.
 * @param DrupalSolrQueryInterface $query
 *   The query for which we want to process the results from
 */
function apachesolr_location_range_apachesolr_process_results(array &$results, DrupalSolrQueryInterface $query) {
    $js_settings = array();
    foreach ($results as $id => $result) {
        if ($result['bundle'] == 'places') {
            list($lat, $lon) = explode(',', $result['node']->locs_field_location);
            $js_settings[] = array(
                'id' => $result['node']->entity_id,
                'link' => $result['node']->url,
                'lat' => $lat,
                'lon' => $lon,
                'label' => $result['node']->label,
            );
        }
    }
    drupal_add_js(array('ApacheSolrLocationRangeSettings' => $js_settings), 'setting');
}

/**
 * Implements hook_gmap().
 */
function apachesolr_location_range_gmap($op, &$map) {

    if ($op == 'libraries') {
        //Add library places to be load.
        return array('places');
    }
}
